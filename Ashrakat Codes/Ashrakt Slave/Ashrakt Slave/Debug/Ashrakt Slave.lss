
Ashrakt Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000272  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000272  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bba  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000768  00000000  00000000  00000fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f9  00000000  00000000  0000174e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00001d48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000480  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004a7  00000000  00000000  00002338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000027df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_12>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 37 01 	jmp	0x26e	; 0x26e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

int main(void)
{
	#ifdef SLAVE_BLUETOOTH

	DDRA |= ((1<<3) | (1<<2));						// Configure LED ports as output
  82:	8a b3       	in	r24, 0x1a	; 26
  84:	8c 60       	ori	r24, 0x0C	; 12
  86:	8a bb       	out	0x1a, r24	; 26
	SPI_initSlave();								// SPI slave initialize function
  88:	0e 94 27 01 	call	0x24e	; 0x24e <SPI_initSlave>
	LCD_init();										// LCD initialize function
  8c:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_init>
	SREG |= (1<<7);									// Enable global Interrupt
  90:	8f b7       	in	r24, 0x3f	; 63
  92:	80 68       	ori	r24, 0x80	; 128
  94:	8f bf       	out	0x3f, r24	; 63
	SPCR |= (1<<7);									// Enable SPI Interrupt
  96:	8d b1       	in	r24, 0x0d	; 13
  98:	80 68       	ori	r24, 0x80	; 128
  9a:	8d b9       	out	0x0d, r24	; 13
	LCD_displayString("Enter 1 or 2");				// Display Startup message on LCD
  9c:	80 e7       	ldi	r24, 0x70	; 112
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_displayString>
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <main+0x22>

000000a6 <__vector_12>:
	while(1)
	{}
} 													// End main function
ISR (SPI_STC_vect)									// Interrupt Service Routine (Interrupt code for SPI)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	switch (SPI_receiveByte())
  c8:	0e 94 33 01 	call	0x266	; 0x266 <SPI_receiveByte>
  cc:	82 30       	cpi	r24, 0x02	; 2
  ce:	19 f0       	breq	.+6      	; 0xd6 <__vector_12+0x30>
  d0:	84 30       	cpi	r24, 0x04	; 4
  d2:	91 f0       	breq	.+36     	; 0xf8 <__vector_12+0x52>
  d4:	21 c0       	rjmp	.+66     	; 0x118 <__vector_12+0x72>
	{
		case 0b00000010:
		PORTA ^= (1<<3);						// Toggle LED_1
  d6:	9b b3       	in	r25, 0x1b	; 27
  d8:	88 e0       	ldi	r24, 0x08	; 8
  da:	89 27       	eor	r24, r25
  dc:	8b bb       	out	0x1b, r24	; 27
		LCD_clearScreen();						// Clear LCD screen
  de:	0e 94 23 01 	call	0x246	; 0x246 <LCD_clearScreen>
		LCD_displayString("LED_1 ON/OFF");		// Display "LED_1 ON/OFF" message
  e2:	80 e6       	ldi	r24, 0x60	; 96
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"Re-Enter 1 or 2");// write in next row and display startup message again
  ea:	4d e6       	ldi	r20, 0x6D	; 109
  ec:	50 e0       	ldi	r21, 0x00	; 0
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 18 01 	call	0x230	; 0x230 <LCD_displayStringRowColumn>
		break;
  f6:	10 c0       	rjmp	.+32     	; 0x118 <__vector_12+0x72>
		case 0b00000100:
		PORTA ^= (1<<2);						// Toggle LED_2
  f8:	9b b3       	in	r25, 0x1b	; 27
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	89 27       	eor	r24, r25
  fe:	8b bb       	out	0x1b, r24	; 27
		LCD_clearScreen();						// Clear LCD screen
 100:	0e 94 23 01 	call	0x246	; 0x246 <LCD_clearScreen>
		LCD_displayString("LED_2 ON/OFF");		// Display "LED_2 ON/OFF" message
 104:	8d e7       	ldi	r24, 0x7D	; 125
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"Re-Enter 1 or 2");// write in next row and display startup message again
 10c:	4d e6       	ldi	r20, 0x6D	; 109
 10e:	50 e0       	ldi	r21, 0x00	; 0
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 18 01 	call	0x230	; 0x230 <LCD_displayStringRowColumn>
		break;
	}
}
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	bf 91       	pop	r27
 11e:	af 91       	pop	r26
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	7f 91       	pop	r23
 126:	6f 91       	pop	r22
 128:	5f 91       	pop	r21
 12a:	4f 91       	pop	r20
 12c:	3f 91       	pop	r19
 12e:	2f 91       	pop	r18
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <LCD_sendCommand>:
	LCD_sendCommand(CLEAR_COMMAND); 						// Clear screen
}

void LCD_sendCommand(unsigned char command)
{
	CLEAR_BIT(LCD_CTRL_PORT,RS); 							/* Instruction Mode RS=0 */
 13a:	92 b3       	in	r25, 0x12	; 18
 13c:	9f 7e       	andi	r25, 0xEF	; 239
 13e:	92 bb       	out	0x12, r25	; 18
	CLEAR_BIT(LCD_CTRL_PORT,RW); 							/* write data to LCD so RW=0 */
 140:	92 b3       	in	r25, 0x12	; 18
 142:	9f 7d       	andi	r25, 0xDF	; 223
 144:	92 bb       	out	0x12, r25	; 18
	LCD_DATA_PORT = command; 								/* out the required command to the data bus D0 --> D7 */
 146:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	89 ef       	ldi	r24, 0xF9	; 249
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCD_sendCommand+0x12>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCD_sendCommand+0x18>
 152:	00 00       	nop
	_delay_ms(1); 											/* delay for processing Tdsw = 100ns */
	SET_BIT(LCD_CTRL_PORT,E); 								/* Enable LCD E=1 */
 154:	82 b3       	in	r24, 0x12	; 18
 156:	80 64       	ori	r24, 0x40	; 64
 158:	82 bb       	out	0x12, r24	; 18
 15a:	89 ef       	ldi	r24, 0xF9	; 249
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <LCD_sendCommand+0x24>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LCD_sendCommand+0x2a>
 164:	00 00       	nop
	_delay_ms(1); 											/* delay for processing Tpw - Tdws = 190ns */
	CLEAR_BIT(LCD_CTRL_PORT,E);								/* disable LCD E=0 */
 166:	82 b3       	in	r24, 0x12	; 18
 168:	8f 7b       	andi	r24, 0xBF	; 191
 16a:	82 bb       	out	0x12, r24	; 18
 16c:	89 ef       	ldi	r24, 0xF9	; 249
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <LCD_sendCommand+0x36>
 174:	00 c0       	rjmp	.+0      	; 0x176 <LCD_sendCommand+0x3c>
 176:	00 00       	nop
 178:	08 95       	ret

0000017a <LCD_init>:

//LCD_sendCommand(CURSOR_ON); //CURSOR ON (0x0E), (before writing in LCD)

void LCD_init(void)
{
	LCD_DATA_PORT_DIR = 0xFF; 								// DEFINE OUTPUT
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	84 bb       	out	0x14, r24	; 20
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); 		// DEFINE OUTPUT for RS/RW/ENABLE
 17e:	81 b3       	in	r24, 0x11	; 17
 180:	80 67       	ori	r24, 0x70	; 112
 182:	81 bb       	out	0x11, r24	; 17
	LCD_sendCommand(HOME);									// Return home
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_sendCommand>
	LCD_sendCommand(MODE_8BIT); 							// 8 bit mode
 18a:	88 e3       	ldi	r24, 0x38	; 56
 18c:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_sendCommand>
	LCD_sendCommand(CURSOR_OFF); 							// Cursor off (0x0C)
 190:	8c e0       	ldi	r24, 0x0C	; 12
 192:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); 						// Clear screen
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_sendCommand>
 19c:	08 95       	ret

0000019e <LCD_displayCharacter>:
	_delay_ms(1); 											/* delay for processing Th = 13ns */
}

void LCD_displayCharacter(unsigned char data)
{
	SET_BIT(LCD_CTRL_PORT,RS); 								/* Data Mode RS=1 */
 19e:	92 b3       	in	r25, 0x12	; 18
 1a0:	90 61       	ori	r25, 0x10	; 16
 1a2:	92 bb       	out	0x12, r25	; 18
	CLEAR_BIT(LCD_CTRL_PORT,RW); 							/* write data to LCD so RW=0 */
 1a4:	92 b3       	in	r25, 0x12	; 18
 1a6:	9f 7d       	andi	r25, 0xDF	; 223
 1a8:	92 bb       	out	0x12, r25	; 18
	SET_BIT(LCD_CTRL_PORT,E);								/* Enable LCD E=1 */
 1aa:	92 b3       	in	r25, 0x12	; 18
 1ac:	90 64       	ori	r25, 0x40	; 64
 1ae:	92 bb       	out	0x12, r25	; 18
 1b0:	e9 ef       	ldi	r30, 0xF9	; 249
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	31 97       	sbiw	r30, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCD_displayCharacter+0x16>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <LCD_displayCharacter+0x1c>
 1ba:	00 00       	nop
	_delay_ms(1);											/* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data;									/* out the required data char to the data bus D0 --> D7 */
 1bc:	85 bb       	out	0x15, r24	; 21
 1be:	89 ef       	ldi	r24, 0xF9	; 249
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCD_displayCharacter+0x24>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCD_displayCharacter+0x2a>
 1c8:	00 00       	nop
	_delay_ms(1); 											/* delay for processing Tdsw = 100ns */
	SET_BIT(LCD_CTRL_PORT,E);								/* Enable LCD E=1 */
 1ca:	82 b3       	in	r24, 0x12	; 18
 1cc:	80 64       	ori	r24, 0x40	; 64
 1ce:	82 bb       	out	0x12, r24	; 18
 1d0:	e9 ef       	ldi	r30, 0xF9	; 249
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	31 97       	sbiw	r30, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_displayCharacter+0x36>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_displayCharacter+0x3c>
 1da:	00 00       	nop
	_delay_ms(1); 											/* delay for processing Tpw - Tdws = 190ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); 							/* disable LCD E=0 */
 1dc:	82 b3       	in	r24, 0x12	; 18
 1de:	8f 7b       	andi	r24, 0xBF	; 191
 1e0:	82 bb       	out	0x12, r24	; 18
 1e2:	89 ef       	ldi	r24, 0xF9	; 249
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCD_displayCharacter+0x48>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <LCD_displayCharacter+0x4e>
 1ec:	00 00       	nop
 1ee:	08 95       	ret

000001f0 <LCD_displayString>:
	_delay_ms(1); 											/* delay for processing Th = 13ns */
}

void LCD_displayString(const char *Str)
{
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	8c 01       	movw	r16, r24
	unsigned char i = 0;
 1f8:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
 1fa:	03 c0       	rjmp	.+6      	; 0x202 <LCD_displayString+0x12>
	{
		LCD_displayCharacter(Str[i]);
 1fc:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_displayCharacter>
		i++;
 200:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_displayString(const char *Str)
{
	unsigned char i = 0;
	while(Str[i] != '\0')
 202:	f8 01       	movw	r30, r16
 204:	ec 0f       	add	r30, r28
 206:	f1 1d       	adc	r31, r1
 208:	80 81       	ld	r24, Z
 20a:	81 11       	cpse	r24, r1
 20c:	f7 cf       	rjmp	.-18     	; 0x1fc <LCD_displayString+0xc>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	08 95       	ret

00000216 <LCD_goToRowColumn>:

void LCD_goToRowColumn(unsigned char row,unsigned char col)
{
	unsigned char Address;									/* calculate the required address */
	switch(row)												/* ADDRESS = COL+(0X40*ROW) */
 216:	88 23       	and	r24, r24
 218:	29 f0       	breq	.+10     	; 0x224 <LCD_goToRowColumn+0xe>
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	21 f4       	brne	.+8      	; 0x226 <LCD_goToRowColumn+0x10>
	{
		case 0:
		Address=col;
		break;
		case 1:
		Address=col+0x40;
 21e:	90 e4       	ldi	r25, 0x40	; 64
 220:	96 0f       	add	r25, r22
		break;
 222:	01 c0       	rjmp	.+2      	; 0x226 <LCD_goToRowColumn+0x10>
{
	unsigned char Address;									/* calculate the required address */
	switch(row)												/* ADDRESS = COL+(0X40*ROW) */
	{
		case 0:
		Address=col;
 224:	96 2f       	mov	r25, r22
		case 1:
		Address=col+0x40;
		break;

	}
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
 226:	89 2f       	mov	r24, r25
 228:	80 68       	ori	r24, 0x80	; 128
 22a:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_sendCommand>
 22e:	08 95       	ret

00000230 <LCD_displayStringRowColumn>:
}

void LCD_displayStringRowColumn(unsigned char row,unsigned char col,const char *Str)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	ea 01       	movw	r28, r20
	LCD_goToRowColumn(row,col); 							/* go to to the required LCD position */
 236:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_goToRowColumn>
	LCD_displayString(Str); 								/* display the string */
 23a:	ce 01       	movw	r24, r28
 23c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD_displayString>
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
	LCD_sendCommand(CLEAR_COMMAND); 						//clear screen
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_sendCommand>
 24c:	08 95       	ret

0000024e <SPI_initSlave>:
 24e:	87 b3       	in	r24, 0x17	; 23
 250:	8f 74       	andi	r24, 0x4F	; 79
 252:	87 bb       	out	0x17, r24	; 23
 254:	87 b3       	in	r24, 0x17	; 23
 256:	80 64       	ori	r24, 0x40	; 64
 258:	87 bb       	out	0x17, r24	; 23
 25a:	83 e6       	ldi	r24, 0x63	; 99
 25c:	8d b9       	out	0x0d, r24	; 13
 25e:	8e b1       	in	r24, 0x0e	; 14
 260:	81 60       	ori	r24, 0x01	; 1
 262:	8e b9       	out	0x0e, r24	; 14
 264:	08 95       	ret

00000266 <SPI_receiveByte>:
 266:	77 9b       	sbis	0x0e, 7	; 14
 268:	fe cf       	rjmp	.-4      	; 0x266 <SPI_receiveByte>
 26a:	8f b1       	in	r24, 0x0f	; 15
 26c:	08 95       	ret

0000026e <_exit>:
 26e:	f8 94       	cli

00000270 <__stop_program>:
 270:	ff cf       	rjmp	.-2      	; 0x270 <__stop_program>
